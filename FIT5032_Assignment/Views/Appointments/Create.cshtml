@model FIT5032_Assignment.Models.Entites.Appointment

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<h2>Booking Appointment</h2>


@using (Html.BeginForm("Create", "Appointments", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <hr />
    <div class="form-horizontal container-xl  m-2 p-1  border-bottom border-end border-5 rounded ">


        <!-- Progress bar -->
        <div class="progress position-relative row m-5 ">
            <div class="progress-bar" role="progressbar" aria-label="Step 1 of progress" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">Step 1</div>
        </div>

        <div class=" row m-0 p-0 d-flex align-items-center">


            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <!-- Step 1: Choose Scan Part -->
            <div class="booking-step " id="step-1">

                <div class="form-group ">
                    @Html.LabelFor(model => model.ScanPart, new { @class = "control-label col-md-2" })
                    <div class="col-md-10 ">
                        @Html.DropDownListFor(model => model.ScanPart, (IEnumerable<SelectListItem>)ViewBag.ScanPartList, "-- Select Scan Part --", new { @class = "form-control", id = "scanPartDropdown" })
                        @Html.ValidationMessageFor(model => model.ScanPart, "", new { @class = "text-danger" })
                    </div>
                </div>
                <button class="btn btn-primary next-btn  end-0 " data-next="2">Next</button>
            </div>



            <!-- Step 2: Select Clinic -->
            <div class="booking-step" id="step-2">
                <h3>2. Select Clinic</h3>
                <div class="form-group">
                    <div id="map" style="width: 100%; height: 400px; "></div>
                    <div class="mt-3" style="">
                        <h4>Choose Clinic:</h4>
                        <div class="form-group">
                            @Html.DropDownListFor(model => model.ClinicId,
                                                  (SelectList)ViewBag.ClinicId,
                                                  "-- Select Clinic --",
                                                  new { @class = "form-control", @id = "cliniclist" })
                            @Html.ValidationMessageFor(model => model.ClinicId)


                                <ul id="clinic-address-list" style="display:none">
                                    @foreach (var address in ViewBag.AddressList)
                                    {
                                        <li class="address">@address</li>
                                    }
                                </ul>
                            <div class="col-md-10">
                            </div>
                        </div>
                    </div>





                </div>
                <button class="btn btn-secondary prev-btn" data-prev="1">Previous</button>
                <button class="btn btn-primary next-btn" data-next="3">Next</button>
            </div>


            <!-- Step 3: Choose time -->
            <div class="booking-step" id="step-3">
                <h3>3. Choose time</h3>
                <div class="container ">
                    @*<input type="text" id="datepicker" class="form-control" placeholder="Please pick a date">*@
                    @Html.TextBoxFor(model => model.AppointmentDate, new { @class = "form-control", id = "datepicker", placeholder = "Please pick a date" })

                    <div class="btn-group" role="group" aria-label="Time Slot Selection" id="timeSlotSelection" style="display:none">

                        @Html.HiddenFor(model => model.StartTime, new { id = "hiddenStartTime" })
                        @Html.HiddenFor(model => model.EndTime, new { id = "hiddenEndTime" })

                        <label class="btn btn-outline-primary time-slot" data-start-time="09:00" data-end-time="10:00">09:00-10:00</label>
                        <label class="btn btn-outline-primary time-slot" data-start-time="10:00" data-end-time="11:00">10:00-11:00</label>
                        <label class="btn btn-outline-primary time-slot" data-start-time="11:00" data-end-time="12:00">11:00-12:00</label>
                        <label class="btn btn-outline-primary time-slot" data-start-time="12:00" data-end-time="13:00">12:00-13:00</label>
                        <!-- ... additional time slots ... -->
                    </div>




                    <span id="appointmentList"></span>


                </div>

                <button class="btn btn-secondary prev-btn" data-prev="2">Previous</button>
                <button class="btn btn-primary next-btn" data-next="4">Next</button>
            </div>

            <!-- Step 4: Provide User Information -->
            <div class="booking-step" id="step-4">
                <h3>4. Provide User Information</h3>

                <div class="form-group">
                    Clinic:
                    <div class="col-md-10" id="selectedClinic">

                    </div>
                </div>

                <div class="form-group">
                    Time:
                    <div class="col-md-10" id="selectedDate">

                        <span id="displayDate"></span> <span id="displayStartTime"></span> - <span id="displayEndTime"></span>

                    </div>
                </div>
                <hr>
                <div class="form-group">
                    ScanPart: <span id="selectedScan"></span>
                    @Html.ValidationMessageFor(model => model.ScanPart, "", new { @class = "text-danger" })
                    <div class="col-md-10">
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Title, (IEnumerable<SelectListItem>)ViewBag.TitleList, "-- Select Title --", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Gender, (IEnumerable<SelectListItem>)ViewBag.GenderList, "-- Select Gender --", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.Birthday, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.Birthday, "{0:yyyy-MM-dd}", new { @class = "form-control", id = "birthdayPicker", placeholder = "Please pick a date" })
                        @Html.ValidationMessageFor(model => model.Birthday, "", new { @class = "text-danger" })

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                    </div>
                </div>




                <button class="btn btn-secondary prev-btn" data-prev="3">Previous</button>
                <input type="submit" value="Create" class="btn btn-default" id="booking-submit" />
            </div>

        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")


</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script src="~/CustomerJsCss/Appointment.js"></script>
}

<script>
    var selectedDate;
    $('#scanPartDropdown').change(function () {
        var selectedValue = $(this).val();
        $('#selectedScan').text(selectedValue);
    });

    $('#datepicker').datepicker({
        weekStart: 1,
        daysOfWeekHighlighted: "6,0",
        autoclose: true,
        todayHighlight: true,
        format: 'yyyy-mm-dd',
        startDate: new Date()
    }).on('changeDate', function (e) {
        selectedDate = $('#datepicker').val();
        console.log(selectedDate);
        //fetchData(selectedDate);
        $('#timeSlotSelection').show();

    });

    $('#cliniclist').change(function () {
        var selectedClinicText = $('#cliniclist option:selected').text();
        $('#selectedClinic').text(selectedClinicText);
    });

    $('.time-slot').on('click', function () {
        var startTime = $(this).data('start-time');
        var endTime = $(this).data('end-time');
        var selectedDate = $('#datepicker').val();
        var fullStartTime = selectedDate + ' ' + startTime;
        var fullEndTime = selectedDate + ' ' + endTime;
        $('#hiddenStartTime').val(fullStartTime);
        $('#hiddenEndTime').val(fullEndTime);

        // Update the displayed time and date
        $('#displayDate').text(selectedDate);
        $('#displayStartTime').text(startTime);
        $('#displayEndTime').text(endTime);



        // Highlight the selected time slot and reset others
        $('.time-slot').removeClass('btn-primary').addClass('btn-outline-primary');
        $(this).addClass('btn-primary').removeClass('btn-outline-primary');
    });



    // Call the function to initialize the event listener


    function fetchData(date) {
        // First, enable all time slots
        $('label.btn').removeClass('disabled btn-outline-secondary').addClass('btn-outline-primary');

        $.ajax({
            url: '/Appointments/GetAppointmentTimes',
            type: 'GET',
            data: { date: date },
            dataType: 'json',
            success: function (data) {
                // Loop through each item in the returned data
                $.each(data, function (index, item) {
                    var timeSlotText = item.StartTime + '-' + item.EndTime;
                    $('label.btn').each(function () {
                        if ($(this).text() === timeSlotText) {
                            $(this).addClass('disabled btn-outline-secondary').removeClass('btn-outline-primary');
                        }
                    });
                });
            },
            error: function (xhr, status, error) {
                console.error('Error:', error);
            }
        });
    }


    $('#birthdayPicker').datepicker({
        endDate: new Date() 
    }).on('changeDate', function (e) {
    });




</script>