@model FIT5032_Assignment.Models.Entites.Appointment

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<h2>Booking Appointment</h2>


@using (Html.BeginForm("Create", "Appointments", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <hr />
    <div class="form-horizontal container-xl  m-2 p-1  border-bottom border-end border-5 rounded ">


        <!-- Progress bar -->
        <div class="progress position-relative row m-5 ">
            <div class="progress-bar" role="progressbar" aria-label="Step 1 of progress" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">Step 1</div>
        </div>

        <div class=" row m-0 p-0 d-flex align-items-center">


            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <!-- Step 1: Choose Scan Part -->
            <div class="booking-step " id="step-1">

                <div class="form-group ">
                    @Html.LabelFor(model => model.ScanPart, new { @class = "control-label col-md-2" })
                    <div class="col-md-10 ">
                        @Html.DropDownListFor(model => model.ScanPart, (IEnumerable<SelectListItem>)ViewBag.ScanPartList, "-- Select Scan Part --", new { @class = "form-control", id = "scanPartDropdown" })
                        @Html.ValidationMessageFor(model => model.ScanPart, "", new { @class = "text-danger" })
                    </div>
                </div>
                <button class="btn btn-primary next-btn  end-0 " data-next="2">Next</button>
            </div>



            <!-- Step 2: Select Clinic -->
            <div class="booking-step" id="step-2">
                <h3>2. Select Clinic</h3>
                <div class="form-group">
                    <div id="map" style="width: 100%; height: 400px; "></div>
                    <div class="mt-3" style="">
                        <h4>Choose Clinic:</h4>
                        <div class="form-group">
                            @Html.DropDownListFor(model => model.ClinicId,
                                                  (SelectList)ViewBag.ClinicId,
                                                  "-- Select Clinic --",
                                                  new { @class = "form-control", @id = "cliniclist" })
                            @Html.ValidationMessageFor(model => model.ClinicId)


                            <ul id="clinic-address-list" style="display:none">
                                @foreach (var address in ViewBag.AddressList)
                                {
                                    <li class="address">@address</li>
                                }
                            </ul>
                            <div class="col-md-10">
                            </div>
                        </div>
                    </div>





                </div>
                <button class="btn btn-secondary prev-btn" data-prev="1">Previous</button>
                <button class="btn btn-primary next-btn" data-next="3">Next</button>
            </div>


            <!-- Step 3: Choose time -->
            <div class="booking-step" id="step-3">
                <h3>3. Choose time</h3>
                <div class="container ">
                    @Html.TextBoxFor(model => model.AppointmentDate, new { @class = "form-control", id = "datepicker", placeholder = "Please pick a date" })

                    <div class="btn-group" role="group" aria-label="Time Slot Selection" id="timeSlotSelection" style="display:none">

                        @Html.HiddenFor(model => model.StartTime, new { id = "hiddenStartTime" })
                        @Html.HiddenFor(model => model.EndTime, new { id = "hiddenEndTime" })

                        <label class="btn btn-outline-primary time-slot" data-start-time="09:00" data-end-time="10:00">09:00-10:00</label>
                        <label class="btn btn-outline-primary time-slot" data-start-time="10:00" data-end-time="11:00">10:00-11:00</label>
                        <label class="btn btn-outline-primary time-slot" data-start-time="11:00" data-end-time="12:00">11:00-12:00</label>
                        <label class="btn btn-outline-primary time-slot" data-start-time="12:00" data-end-time="13:00">12:00-13:00</label>
                    </div>




                    <span id="appointmentList"></span>


                </div>

                <button class="btn btn-secondary prev-btn" data-prev="2">Previous</button>
                <button class="btn btn-primary next-btn" data-next="4">Next</button>
            </div>

            <!-- Step 4: Provide User Information -->
            <div class="booking-step" id="step-4">
                <h3>4. Provide User Information</h3>

                <div class="form-group">
                    <strong>
                        Clinic:
                    </strong>
                    <div class="col-md-10" id="selectedClinic">

                    </div>
                </div>

                <div class="form-group">
                    <strong>
                        Time:
                    </strong>

                    <div class="col-md-10 " id="selectedDate">

                        <span id="displayDate"></span> <span id="displayStartTime"></span> - <span id="displayEndTime"></span>

                    </div>
                </div>
                <hr>
                <div class="form-group">
                    <strong>ScanPart:</strong> <span id="selectedScan"></span>
                    @Html.ValidationMessageFor(model => model.ScanPart, "", new { @class = "text-danger" })
                    <div class="col-md-10">
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2 fw-bold" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Title, (IEnumerable<SelectListItem>)ViewBag.TitleList, "-- Select Title --", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2 fw-bold" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2 fw-bold" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2 fw-bold" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Gender, (IEnumerable<SelectListItem>)ViewBag.GenderList, "-- Select Gender --", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.Birthday, htmlAttributes: new { @class = "control-label col-md-2 fw-bold" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.Birthday, "{0:yyyy-MM-dd}", new { @class = "form-control", id = "birthdayPicker", placeholder = "Please pick a date" })
                        @Html.ValidationMessageFor(model => model.Birthday, "", new { @class = "text-danger" })

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2 fw-bold" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2 fw-bold" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2 fw-bold" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                    </div>
                </div>




                <button class="btn btn-secondary prev-btn" data-prev="3">Previous</button>
                <input type="submit" value="Create" class="btn btn-primary" id="booking-submit" />
            </div>

        </div>
    </div>
}

<div>

    @if (User.Identity.IsAuthenticated)
    {
        if (User.IsInRole("Patient"))
        {
            @Html.ActionLink("Back to List", "UserAppointments")

        }
        else
        {
            @Html.ActionLink("Back to List", "Index", "Clinics")
        }


    }


</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/CustomerJsCss/Appointment.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.css" />
    <!-- Bootstrap Datepicker JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.js"></script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAp6y2XwKXUYOC56UVR7AtoCN0iTWvuJs0&callback=initMap"></script>
    <script>
        // --------------- map start ---------------
        function initMap() {
            var clt_address = "1 Tarella Road, Clayton Victoria 3168";
            var mel_address = "68 LONSDALE STREET, Melbourne Victoria 3000"
            var api = "AIzaSyAp6y2XwKXUYOC56UVR7AtoCN0iTWvuJs0";
            

            var clayton = { lat: -37.919890, lng: 145.126160 };
            var  melbourne = { lat: -37.809820, lng: 144.969830 };

            var map = new google.maps.Map($('#map')[0], {
                zoom: 10, // Reduced zoom to ensure both markers are visible
                center: melbourne
            });

            var currentPositionMarker;

            // Try to get the current location of the user
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var currentPosition = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    currentPositionMarker = new google.maps.Marker({
                        position: currentPosition,
                        map: map,
                        title: 'Your',
                        icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'

                    });

                    map.setCenter(currentPosition);
                });
            }


            var infoWindowMelbourne = new google.maps.InfoWindow({
                content: '<h4>68 LONSDALE STREET</h4><p>Melbourne Victoria 3000, Australia</p>'
            });

            var markerMelbourne = new google.maps.Marker({
                position: melbourne,
                map: map,
                title: '68 LONSDALE STREET, Melbourne Victoria 3000'
            });

            $(markerMelbourne).click(function () {
                map.setZoom(15); // Set zoom level to 15
                map.setCenter(markerMelbourne.getPosition()); // Set center to marker's position
                infoWindowMelbourne.open(map, markerMelbourne);
            });

            var infoWindowClayton = new google.maps.InfoWindow({
                content: '<h4>1 Tarella Road, Clayton</h4><p>VIC 3168</p>'
            });

            var markerClayton = new google.maps.Marker({
                position: clayton,
                map: map,
                title: '1 Tarella Road, Clayton Victoria 3168'
            });
            markerMelbourne.addListener('click', function () {
                if (currentPositionMarker) {
                    var distance = haversine_distance(currentPositionMarker, markerMelbourne);
                    alert("Distance from current location: " + distance.toFixed(2) + " miles");
                }
                map.setZoom(15); // Set zoom level to 15
                map.setCenter(markerMelbourne.getPosition()); // Set center to marker's position
                infoWindowMelbourne.open(map, markerMelbourne);
            });

            markerClayton.addListener('click', function () {
                if (currentPositionMarker) {
                    var distance = haversine_distance(currentPositionMarker, markerClayton);
                    alert("Distance from current location: " + distance.toFixed(2) + " miles");
                }
                map.setZoom(15); // Set zoom level to 15
                map.setCenter(markerClayton.getPosition()); // Set center to marker's position
                infoWindowClayton.open(map, markerClayton);
            });

        }
        function haversine_distance(mk1, mk2) {
            var R = 3958.8; // Radius of the Earth in miles
            var rlat1 = mk1.position.lat() * (Math.PI / 180); // Convert degrees to radians
            var rlat2 = mk2.position.lat() * (Math.PI / 180); // Convert degrees to radians
            var difflat = rlat2 - rlat1; // Radian difference (latitudes)
            var difflon = (mk2.position.lng() - mk1.position.lng()) * (Math.PI / 180); // Radian difference (longitudes)

            var d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2)));
            return d;
        }


        // --------------- map end ---------------


        // --------------- datepicker start ---------------

        var selectedDate;
        $('#scanPartDropdown').change(function () {
            var selectedValue = $(this).val();
            $('#selectedScan').text(selectedValue);
        });

        $('#datepicker').datepicker({
            weekStart: 1,
            daysOfWeekHighlighted: "6,0",
            autoclose: true,
            todayHighlight: true,
            format: 'yyyy-mm-dd',
            startDate: new Date()
        }).on('changeDate', function (e) {
            selectedDate = $('#datepicker').val();
            console.log(selectedDate);
            fetchData(selectedDate);
            $('#timeSlotSelection').show();

        });

        $('#cliniclist').change(function () {
            var selectedClinicText = $('#cliniclist option:selected').text();
            $('#selectedClinic').text(selectedClinicText);
        });

        $('.time-slot').on('click', function () {
            var startTime = $(this).data('start-time');
            var endTime = $(this).data('end-time');
            var selectedDate = $('#datepicker').val();
            var fullStartTime = selectedDate + ' ' + startTime;
            var fullEndTime = selectedDate + ' ' + endTime;
            $('#hiddenStartTime').val(fullStartTime);
            $('#hiddenEndTime').val(fullEndTime);

            // Update the displayed time and date
            $('#displayDate').text(selectedDate);
            $('#displayStartTime').text(startTime);
            $('#displayEndTime').text(endTime);



            // Highlight the selected time slot and reset others
            $('.time-slot').removeClass('btn-primary').addClass('btn-outline-primary');
            $(this).addClass('btn-primary').removeClass('btn-outline-primary');
        });



        // Call the function to initialize the event listener


        function fetchData(date) {
            // First, enable all time slots
            $('label.btn').removeClass('disabled btn-outline-secondary').addClass('btn-outline-primary');

            $.ajax({
                url: '/Appointments/GetAppointmentTimes',
                type: 'GET',
                data: { date: date },
                dataType: 'json',
                success: function (data) {
                    // Loop through each item in the returned data
                    $.each(data, function (index, item) {
                        var timeSlotText = item.StartTime + '-' + item.EndTime;
                        $('label.btn').each(function () {
                            if ($(this).text() === timeSlotText) {
                                $(this).addClass('disabled btn-outline-secondary').removeClass('btn-outline-primary');
                            }
                        });
                    });
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                }
            });
        }


        $('#birthdayPicker').datepicker({
            endDate: new Date()
        }).on('changeDate', function (e) {
        });
        // --------------- datepicker end ---------------

    </script>

    <script>
        $(document).ready(function () {


            let currentStep = 1;
            // Show only the first step initially
            $('.booking-step').hide();
            $('#step-1').show();

            $('.next-btn').click(function () {
                let nextStep = $(this).data('next');
                $('#step-' + currentStep).hide();
                $('#step-' + nextStep).show();
                currentStep = nextStep;
                updateProgressBar(currentStep);
            });

            $('.prev-btn').click(function () {
                let prevStep = $(this).data('prev');
                $('#step-' + currentStep).hide();
                $('#step-' + prevStep).show();
                currentStep = prevStep;
                updateProgressBar(currentStep);
            });


            function updateProgressBar(stepNumber) {
                let percentage = (stepNumber / 4) * 100;
                $('.progress-bar')
                    .css('width', percentage + '%')
                    .attr('aria-valuenow', percentage)
                    .attr('aria-label', 'Booking progress: Step ' + stepNumber + ' of 4')  // Update this line for the aria-label
                    .text('Step ' + stepNumber);
            }

            $('.next-btn').click(function (event) {
                event.preventDefault(); // prevent form submission
            });

            $('.prev-btn').click(function (event) {
                event.preventDefault(); // prevent form submission
            });



        });
        </script>

}

