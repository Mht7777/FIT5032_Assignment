@{
    ViewBag.Title = "Chat Hub";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Chat Hub</h2>
<div class="container">

    <div class="row">
        <div class="col">
            <form onsubmit="return false">
                <div class="form-group">
                    <label>Display Name:</label>
                    <div>@ViewBag.User</div>
                    <br>
                    <input type="text" class="form-control" id="displayname" value="@ViewBag.User" style="display:none" required  />
                </div>
                <div class="form-group">
                    <label>Add to do</label>
                    @*<input type="text" class="form-control" id="message" required />*@
                    <textarea id="chatbody" name="Contents" class=""></textarea>

                </div>
                <button type="submit" class="btn btn-primary" id="sendmessage">Add to List</button>
            </form>
        </div>

        <div class="col">
            <h2>Items on the list</h2>
            <ul id="discussion" class="list-group"></ul>
        </div>
    </div>


</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

    <!--SignalR script to update the chat page and send messages.-->
    <script>

        $(function () {
            // Reference the auto-generated proxy for the hub.
            var toDo = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            toDo.client.addNewMessageToPage = function (name, message) {
                message = message.replace(/<p>/g, '').replace(/<\/p>/g, '\n');
                var time = moment().format('DD-MMM-YYYY HH:mm');
                // Add the message to the page without htmlEncode on the message.
                $('#discussion').append("<li class='list-group-item'><strong>" + htmlEncode(name)
                    + '</strong>' + "(" + time+"): " + message + '</li>');
            };

            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    var displayname = $('#displayname').val();

                    var message = tinymce.get('chatbody').getContent();

                    if (displayname.length == 0 || message.length == 0)
                        return;
                    toDo.server.send(displayname, message);
                    toDo.server.getChatGptResponse(message);
                    // Clear the TinyMCE editor after sending the message.
                    tinymce.get('chatbody').setContent('');
                });
            });



        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        //rich text start
        tinymce.init({
            selector: '#chatbody',
            height: 200,
            min_height: 200,
            max_height: 300,
            width: 500,
            plugins: 'emoticons image link',
            toolbar: 'undo redo |emoticons |',
            menubar: false,
            statusbar: false,
            images_file_types: "jpeg,jpg,png,gif",
            style_formats: [
                { title: 'Paragraph', format: 'p' },
                { title: 'Heading 1', format: 'h1' },
                { title: 'Heading 2', format: 'h2' },
                { title: 'Large text', format: 'largetext' },
                { title: 'Button styles' },
                { title: 'Call-to-action', format: 'calltoaction' },
            ],
        });
        //rich text end
    </script>
}