<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - Ultra Scan</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

</head>
<body>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-dark bg-dark gradient-custom">
        <div class="container">
            @Html.ActionLink("UltraScan", "Index", "Home", new { area = "" }, new { @class = "navbar-brand deep-font-color" })
            <button type="button" class="navbar-toggler" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" title="Toggle navigation" aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse d-sm-inline-flex justify-content-between">
                <ul class="navbar-nav flex-grow-1">

                    <li>@Html.ActionLink("Home", "Index", "Home", new { area = "" }, new { @class = "nav-link deep-font-color" })</li>
                    <li>@Html.ActionLink("About", "About", "Home", new { area = "" }, new { @class = "nav-link deep-font-color" })</li>
                    <li>@Html.ActionLink("Contact", "Contact", "Home", new { area = "" }, new { @class = "nav-link deep-font-color" })</li>

                    @if (User.Identity.IsAuthenticated)
                    {

                        if (User.IsInRole("Patient"))
                        {
                            <li>@Html.ActionLink("Appointment", "UserAppointments", "Appointments", new { area = "" }, new { @class = "nav-link deep-font-color" })</li>
                        }

                        if (User.IsInRole("Staff"))
                        {
                            <li>@Html.ActionLink("Clinic", "Index", "Clinics", new { area = "" }, new { @class = "nav-link deep-font-color" })</li>
                        }
                    }




                </ul>
                @Html.Partial("_LoginPartial")

            </div>
        </div>
    </nav>

    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - Minghao Tang Application</p>
        </footer>
    </div>
    @Html.Partial("ChatWindow")
    <input type="text" class="form-control" id="displayname" value="@ViewBag.User" style="display:none" required />


    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)


    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script async src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>


    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(".floating-window").draggable();

        $("#closeButton").click(function () {
            $(".floating-window").hide();
        });
        $(function () {
            // Hide the chat window initially
            $(".floating-window").hide();

            // Handle the Open Chat button click
            $("#openChatButton").click(function () {
                $(".floating-window").show();
                $(this).hide(); // hide the open button
            });

            // Handle the Close (X) button in chat window
            $("#closeButton").click(function () {
                $(".floating-window").hide();
                $("#openChatButton").show(); // show the open button
            });
        });


        $(function () {
            // Reference the auto-generated proxy for the hub.
            var toDo = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            toDo.client.addNewMessageToPage = function (name, message) {
                message = message.replace(/<p>/g, '').replace(/<\/p>/g, '\n');
                var time = moment().format('DD-MMM-YYYY HH:mm');
                // Add the message to the page without htmlEncode on the message.
                $('#discussion').append("<li class='list-group-item'><strong>" + htmlEncode(name)
                    + '</strong>' + "(" + time + "): " + message + '</li>');
            };

            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    var displayname = "Your";

                    var message = tinymce.get('chatbody').getContent();

                    if (displayname.length == 0 || message.length == 0)
                        return;
                    toDo.server.send(displayname, message);
                    toDo.server.getChatGptResponse(message);
                    // Clear the TinyMCE editor after sending the message.
                    tinymce.get('chatbody').setContent('');
                });
            });



        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        //rich text start
        tinymce.init({
            selector: '#chatbody',
            height: 150,
            min_height: 150,
            max_height: 300,
            plugins: 'emoticons image link',
            toolbar: 'undo redo |emoticons |',
            menubar: false,
            statusbar: false,
            images_file_types: "jpeg,jpg,png,gif",
            style_formats: [
                { title: 'Paragraph', format: 'p' },
                { title: 'Heading 1', format: 'h1' },
                { title: 'Heading 2', format: 'h2' },
                { title: 'Large text', format: 'largetext' },
                { title: 'Button styles' },
                { title: 'Call-to-action', format: 'calltoaction' },
            ],
        });
        //rich text end
    </script>

    <style>
        .floating-window {
            position: fixed;
            bottom: 15px;
            right: 15px;
            height: 500px;
            width: 400px;
            max-height: 500px;
            min-height: 300px;
            background-color: #eaeaea;
            z-index: 9999;
            border-radius: 10px;
            overflow: hidden;
            flex-direction: column;
        }

        .window-header {
            background-color: #007bff;
            color: white;
            padding: 10px;
            cursor: move;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            height: 8%;
        }

        #windowBody {
            position: fixed;
            bottom: 15px;
            right: 15px;
            z-index: 1000;
        }


        #closeButton {
            background: none;
            border: none;
            font-size: 20px;
            line-height: 1;
            color: white;
            cursor: pointer;
            border-radius: 50%;
        }


        #message-container {
            overflow-y: auto;
            max-height: 500px;
            padding: 10px;
            flex: 1;
        }

        .open-chat-btn {
            position: fixed;
            bottom: 15px;
            right: 15px;
            padding: 10px 20px;
            font-size: 16px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            z-index: 999;
        }
    </style>
</body>


</html>


